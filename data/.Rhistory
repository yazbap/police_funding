library(foreign)
# data is from https://web.stanford.edu/group/collectiveaction/cgi-bin/drupal/
data <- read.dta("dynamics_of_collective_action.dta")
data
View(data)
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, linewidth=60)
# you can include your libraries here:
library(tidyverse)
library(haven)
# and any other options in R:
options(scipen=999)
set.seed(123)
n_obs <- 1000
U <- rbinom(n_obs, 1, .75)
c_type <- ifelse(U == 1,
sample(1:3, n_obs, prob = c(0.7,0.1,0.2), replace=T),
sample(1:3, n_obs, prob = c(0.35,0.3,0.35), replace=T))
tau <- ifelse(c_type == 1, 5000, 1000)
tau <- ifelse(c_type == 3, 2500, tau)
Z <- rbinom(n_obs, 1, .5)
D <- ifelse(Z == 1 & c_type == 1, 1, NA)
D <- ifelse(Z == 0 & c_type == 1, 0, D)
D <- ifelse(c_type == 2, 1, D)
D <- ifelse(c_type == 3, 0, D)
Y0 <- rnorm(n_obs, mean = 50000, sd = 2500) + 25000*U
Y1 <- Y0 + tau
Y <- ifelse(D == 1, Y1, Y0)
data <- data.frame( cbind(
Z, D, Y0, Y1, Y
)
)
data_encouraged <- data %>%
filter(Z == 1)
data_unencouraged <- data %>%
filter(Z == 0)
cat("The true ITT is", mean(data_encouraged$Y1) - mean(data_unencouraged$Y0))
cat("\nThe true ATT is", mean(data$Y1) - mean(data$Y0))
lm.mod <- lm(Y ~ D, data = data)
summary(lm.mod)
data
summary(lm.mod)
data
---
title: "MY457: Problem Set Template"
# Calculate sample means
mean_Z <- mean(data$Z)
mean_Y <- mean(data$Y)
mean_D <- mean(data$D)
# Calculate sample variances
var_Z <- var(data$Z)
var_Y <- var(data$Y)
var_D <- var(data$D)
# Calculate sample covariance
cov_ZY <- cov(data$Z, data$Y)
cov_ZD <- cov(data$Z, data$D)
# Compute plug-in Wald estimator
Wald_estimator <- ((mean_Z * mean_Y) - (mean_D * mean_Z)) / cov_ZY
# Print the result
print(Wald_estimator)
coxZY/ cov_ZD
cov_ZY <- cov(data$Z, data$Y)
cov_ZD <- cov(data$Z, data$D)
coxZY/cov_ZD
cov_ZY/cov_ZD
cat("The true ITT is", mean(data_encouraged$Y1) - mean(data_unencouraged$Y0))
cat("\nThe true ATT is", mean(data$Y1) - mean(data$Y0))
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, linewidth=60)
# you can include your libraries here:
library(tidyverse)
library(haven)
library(AER)
# and any other options in R:
options(scipen=999)
ivreg(Y ~ D | Z, data = data)
# wald_estimator
set.seed(NULL)
n_obs <- 1000
U <- rbinom(n_obs, 1, .75)
data_frames <- list()
for (i in seq_along(1:1000)){
c_type <- ifelse(U == 1,
sample(1:3, n_obs, prob = c(0.7,0.1,0.2), replace=T),
sample(1:3, n_obs, prob = c(0.35,0.3,0.35), replace=T))
tau <- ifelse(c_type == 1, 5000, 1000)
tau <- ifelse(c_type == 3, 2500, tau)
Z <- rbinom(n_obs, 1, .5)
D <- ifelse(Z == 1 & c_type == 1, 1, NA)
D <- ifelse(Z == 0 & c_type == 1, 0, D)
D <- ifelse(c_type == 2, 1, D)
D <- ifelse(c_type == 3, 0, D)
Y0 <- rnorm(n_obs, mean = 50000, sd = 2500) + 25000*U
Y1 <- Y0 + tau
Y <- ifelse(D == 1, Y1, Y0)
data <- data.frame( cbind(
Z, D, Y0, Y1, Y
)
)
data_frames[[i]] <- data
}
data_frames
data_frames[[1]]
data_frames[[2]]
#wald_estimator
# Create an empty vector to store the Wald estimator estimates
wald_estimates <- numeric(length(data_frames))
# Iterate over each data frame
for (i in seq_along(data_frames)) {
# Extract the current data frame
data <- data_frames[[i]]
# Calculate sample covariance
cov_ZY <- cov(data$Z, data$Y)
cov_ZD <- cov(data$Z, data$D)
# Compute Wald estimator
wald_estimates[i] <- cov_ZY / cov_ZD
}
# Print or further process the vector of Wald estimator estimates
print(wald_estimates)
#regression
# Create an empty vector to store the Wald estimator estimates
regression_estimates <- numeric(length(data_frames))
# Iterate over each data frame
for (i in seq_along(data_frames)) {
# Extract the current data frame
data <- data_frames[[i]]
lm.modtreat <- lm(D ~ Z, data = data)
summary(lm.modtreat)
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(Y ~ fitted_D, data = data)
# Compute Wald estimator
regression_estimates[i] <- coef(model)["fitted_D"]
}
#regression
# Create an empty vector to store the Wald estimator estimates
regression_estimates <- numeric(length(data_frames))
# Iterate over each data frame
for (i in seq_along(data_frames)) {
# Extract the current data frame
data <- data_frames[[i]]
lm.modtreat <- lm(D ~ Z, data = data)
summary(lm.modtreat)
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(Y ~ fitted_D, data = data)
# Compute Wald estimator
regression_estimates[i] <- coef(lm.mod2stage)["fitted_D"]
}
# Print or further process the vector of Wald estimator estimates
print(regression_estimates)
ivreg_estimate <- ivreg(Y ~ D | Z, data = data)
coef(ivreg_estimate)[D]
coef(ivreg_estimate)["D"]
ivreg_estimate
coef(ivreg_estimate)["D"]
# ivreg
# Create an empty vector to store the Wald estimator estimates
ivreg_estimates <- numeric(length(data_frames))
# Iterate over each data frame
for (i in seq_along(data_frames)) {
# Extract the current data frame
data <- data_frames[[i]]
ivreg_estimate <- ivreg(Y ~ D | Z, data = data)
coef(ivreg_estimate)["D"]
# Compute Wald estimator
ivreg_estimates[i] <- coef(ivreg_estimate)["D"]
}
# Print or further process the vector of Wald estimator estimates
print(ivreg_estimates)
vector <- c(1, 2, 3, 4, 5)
# Single value
single_value <- 10
# Subtract single value from each element in the vector
result <- single_value - vector
# Print the result
print(result)
# Subtract single value from each element in the vector
hist_data <- 4698 - regression_estimates
# Print the result
hist(hist_data)
hist_data <- 4698 - wald_estimates_estimates
hist_data <- 4698 - wald_estimates
# Print the result
hist(hist_data)
# Print the result
hist(hist_data, title = "Difference in wald estimates from true LATE")
# Print the result
hist(hist_data, title = "Difference in wald estimates from true LATE")
# Subtract single value from each element in the vector
hist_data <- 4698 - wald_estimates
# Print the result
hist(hist_data, title = "Difference in wald estimates from true LATE")
?hist
# Print the result
hist(hist_data, main = "Difference in wald estimates from true LATE")
hist_data <- 4698 - regression_estimates
# Print the result
hist(hist_data, main = "Difference in regression estimates from true LATE")
hist_data <- 4698 - ivreg_estimates
# Print the result
hist(hist_data, main = "Difference in ivreg estimates from true LATE")
```{r}
model <- lm(CIRI ~ ., data = foreign_aid)
foreign_aid <- read_dta("foreign_aid_human_rights_and_democracy_promotion.dta")
model <- lm(CIRI ~ ., data = foreign_aid)
# Extract the coefficient for "ODA" using the coef() function
coefficient_oda <- coef(model)["ODA"]
# Print the coefficient for "ODA"
print(coefficient_oda)
cov_ZY <- cov(foreign_aid$Colony, foreign_aid$CIRI)
cov_ZD <- cov(foreign_aid$Colony, foreign_aid$ODA)
# Compute plug-in Wald estimator
Wald_estimator <- cov_ZY / cov_ZD
# Print the result
print(Wald_estimator)
lm.mod <- lm(Y ~ D, data = data)
coef(lm.mod)["D"]
lm.mod2 <- lm(Y ~ Z, data = data)
coef(lm.mod)["Z"]
lm.mod2 <- lm(Y ~ Z, data = data)
coef(lm.mod2)["Z"]
lm.modtreat <- lm(D ~ Z, data = data)
summary(lm.modtreat)
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(Y ~ fitted_D, data = data)
cat("The estimate of the LATE using regression is", coef(lm.mod2stage)["fitted_D"])
lm.modtreat <- lm(D ~ Z, data = data)
summary(lm.modtreat)
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(Y ~ fitted_D, data = data)
cat("The estimate of the LATE using regression is", coef(lm.mod2stage)["fitted_D"])
lm.modtreat <- lm(D ~ Z, data = data)
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(Y ~ fitted_D, data = data)
cat("The estimate of the LATE using regression is", coef(lm.mod2stage)["fitted_D"])
ivreg_estimate <- ivreg(Y ~ D | Z, data = data)
cat("The estimate of the LATE using the ivreg command is", coef(lm.mod2stage)["fitted_D"])
#wald_estimator
# Create an empty vector to store the Wald estimator estimates
wald_estimates <- numeric(length(data_frames))
# Iterate over each data frame
for (i in seq_along(data_frames)) {
# Extract the current data frame
data <- data_frames[[i]]
ivreg(Y ~ D | Z, data = data)
# Compute Wald estimator
wald_estimates[i] <- cov_ZY / cov_ZD
}
# Subtract single value from each element in the vector
hist_data <- 4698 - wald_estimates
# Print the result
hist(hist_data, main = "Difference in wald estimates from true LATE")
wald_estimates
wald_estimates <- c()
# Create an empty vector to store the Wald estimator estimates
wald_estimates <- numeric(length(data_frames))
#wald_estimator
# Create an empty vector to store the Wald estimator estimates
wald_estimates <- numeric(length(data_frames))
# Iterate over each data frame
for (i in seq_along(data_frames)) {
# Extract the current data frame
data <- data_frames[[i]]
ivreg(Y ~ D | Z, data = data)
# Compute Wald estimator
wald_estimates[i] <- cov_ZY / cov_ZD
}
# Subtract single value from each element in the vector
hist_data <- 4698 - wald_estimates
# Print the result
hist(hist_data, main = "Difference in wald estimates from true LATE")
data_frames[[1]]
data_frames[[2]]
#wald_estimator
# Create an empty vector to store the Wald estimator estimates
wald_estimates <- numeric(length(data_frames))
# Iterate over each data frame
for (i in seq_along(data_frames)) {
# Extract the current data frame
data <- data_frames[[i]]
cov_ZY <- cov(data$Z, data$Y)
cov_ZD <- cov(data$Z, data$D)
# Compute Wald estimator
wald_estimates[i] <- cov_ZY / cov_ZD
}
# Subtract single value from each element in the vector
hist_data <- 4698 - wald_estimates
# Print the result
hist(hist_data, main = "Difference in wald estimates from true LATE")
lm.modtreat <- lm(ODA ~ Colony, data = foreign_aid)
cat("The first stage's value is", coef(lm.modtreat)["Colony"] )
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(CIRI ~ fitted_D, data = foreign_aid)
cat("The second stage's value is", coef(lm.modtreat)["fitted_D"] )
lm.modtreat <- lm(ODA ~ ., data = foreign_aid)
cat("The first stage's value is", coef(lm.modtreat)["Colony"] )
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(CIRI ~ fitted_D, data = foreign_aid)
cat(" and the second stage's value is", coef(lm.mod2stage)["fitted_D"] )
lm.modtreat <- lm(ODA ~ Colony, data = foreign_aid)
cat("The first stage's value is", coef(lm.modtreat)["Colony"] )
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(CIRI ~ fitted_D, data = foreign_aid)
cat(" and the second stage's value is", coef(lm.mod2stage)["fitted_D"] )
lm.modtreat <- lm(ODA ~ Colony, data = foreign_aid)
cat("The first stage's value is", coef(lm.modtreat)["Colony"] )
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(CIRI ~ ., data = foreign_aid)
cat(" and the second stage's value is", coef(lm.mod2stage)["fitted_D"] )
lm.modtreat <- lm(ODA ~ Colony, data = foreign_aid)
cat("The first stage's value is", coef(lm.modtreat)["Colony"] )
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(CIRI ~ . + fitted_D, data = foreign_aid)
cat(" and the second stage's value is", coef(lm.mod2stage)["fitted_D"] )
lm.modtreat <- lm(ODA ~ Colony, data = foreign_aid)
cat("The first stage's value is", coef(lm.modtreat)["Colony"] )
fitted_D <- predict(lm.modtreat)
lm.mod2stage <- lm(CIRI ~ fitted_D, data = foreign_aid)
cat(" and the second stage's value is", coef(lm.mod2stage)["fitted_D"] )
